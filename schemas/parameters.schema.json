{
  "title": "parameters",
  "description": "parameters of a simulation run",
  "type": "object",
  "required": ["code", "scenario", "limit", "seed", "date", "geojson_output", "kpi_output",
    "simulate_routes", "dynamic_input_file", "init_input_file", "topologies"],
  "properties": {
    "code": {
      "type": "string",
      "title": "Model code",
      "description": "Code of the simulation model to be run"
    },
    "scenario": {
      "type": "string",
      "title": "Simulation scenario",
      "description": "Name of the scenario simulated",
      "example": "C2G"
    },
    "limit": {
      "type": "integer",
      "title": "Simulation time limit",
      "description": "Number of simulation steps to execute",
      "minimum": 1,
      "example": 4000
    },
    "make_static": {
      "type": "string",
      "title": "Make inputs static",
      "description": "Make certain inputs static, ie generate them at the beginning of the simulation. ",
      "oneOf": [
        {"const":  "all", "description":  "Make all inputs static."},
        {"const":  "prebooked", "description":  "Make static the inputs with prebooked==True."},
        {"const":  "prebooked_only", "description":  "Make static the inputs with prebooked==True and don't generate the others."},
        {"const":  "ghosts", "description":  "Make all inputs static for the resolution, then remove prebooked from solution and insert them dynamically."}
      ]
    },
    "early_dynamic_input": {
      "type": ["integer", "null"],
      "title": "Early dynamic input offset",
      "description": "Offset applied to the users origin time to make them enter the simulation earlier, in seconds",
      "example": 3600,
      "default": 0
    },
    "seed": {
      "type": "number",
      "title": "Random seed",
      "description": "Random seed used for the generation of random events",
      "example": "42"
    },
    "date": {
      "type": "string",
      "title": "Simulation date",
      "description": "Date of the simulation, used for filtering services. Format YYYY-MM-DD",
      "format": "date",
      "example": "2019-10-28"
    },
    "time_log": {
      "type": "boolean",
      "title": "Simulation time log",
      "description": "Boolean indicating if simulation time should be logged",
      "default": false
    },
    "generate_summary": {
      "title": "Generate run summary",
      "description": "Boolean indicating if run summary should be generated.",
      "type": "boolean",
      "default": false
    },
    "traces_output": {
      "type": "boolean",
      "title": "Traces output",
      "description": "Boolean indicating if an agent traces output should be created",
      "default": false
    },
    "geojson_output": {
      "type": "boolean",
      "title": "Geojson output",
      "description": "Boolean indicating if a geojson file should be created"
    },
    "kpi_output": {
      "type": "boolean",
      "title": "KPI output",
      "description": "Boolean indicating if a KPI file should be created"
    },
    "simulate_routes": {
      "type": "boolean",
      "title": "Route steps simulation",
      "description": "Boolean indicating if route steps should be simulated"
    },
    "dynamic_input_file": {
      "type": ["string", "null"],
      "title": "Dynamic input file",
      "description": "Name of the file containing the dynamic input",
      "example": "CS_SB_dynamic_input.json"
    },
    "init_input_file": {
      "type": ["string", "array", "null"],
      "title": "Initialisation input file",
      "description": "Name of the file containing the initialisation input or list of file names",
      "example": "CS_SB_init_input.json"
    },
    "topologies": {
      "type": "object",
      "title": "Topologies",
      "description": "Files for initialising the topologies",
      "properties": {
        "additional_properties": {
          "description": "Array of two string items, the network file and the speeds file",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 2,
          "maxItems": 2
        }
      },
      "required": ["walk"]
    },
    "store_paths": {
      "title": "Store shortest paths",
      "description": "Indicates if computed shortest paths should be stored in a dict to avoid computing them again. Either a boolean or a dict with the same keys as topologies and boolean values.",
      "type": ["boolean", "object"],
      "default": false
    },
    "gtfs_timetables": {
      "type": ["string", "null"],
      "title": "GTFS timetables archive",
      "description": "Name of the archive containing the gtfs timetables, placed in the gtfs_feeds data folder",
      "pattern": "(.)*(.zip)",
      "example": "GTFS_nantes.zip"
    },
    "line_shapes_file": {
      "type": ["string", "null"],
      "title": "Line shapes file",
      "description": "Name of the file containing shapes of public transport lines",
      "pattern": "(.)*(.csv)",
      "example": "rennes_line_shapes.csv"
    },
    "routes": {
      "type": ["array", "null"],
      "items": {
        "type": "string"
      },
      "title": "Routes to keep in the public transport simulation",
      "description": "List of routes that should be present in the simulation. If null, keep all routes."
    }
  }
}